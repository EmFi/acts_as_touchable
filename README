Acts As Touchable
=================

Note: This plugin has been obsoleted by Rails 2.3.3

Description
===========

Provides methods and callbacks to touch updated_at/updated_on attributes of an
ActiveRecord. This adds common directory style timestamping to models with
parent-child relationships. Where the top level directory shares the timestamp
with the most recently modified of its descendents.

Acts As Touchable behaves similarly to the :autosave association option. Only in
reverse. As it updates parent objects when the child object is modified.


Requirements
============

A class that invokes acts_as_touchable must have a datetime column named
update_(on|at) or specify a column to use through the :column option.


Installation
============

From the root of your rails project run the following command:
./script/plugin install git://github.com/EmFi/acts_as_touchable.git

Usage
=====

To define a parent-child relationship as a touchable one. The parent model must
call acts_as_touchable, and the child model must have supply the :touchable
option ot the association with the parent model. See the examples for further
details.


acts_as_touchable options
-------------------------

Declares model as touchable and adds touch and touch! methods to the Class's
instance methods.

Accepted options: 
:column => name of column in model to update with timestamp when touched.
    Default uses updated_at or updated_belongs_to options on.


touch
------

Instance method that sets timestamp column specified in acts_as_touchable
definition to current time.

touch!
------

Has the same behaviour as touch, but also saves the record.



belongs_to/has_many/has_one association_id, :touchable => false|true|call_back
------------------------------------------------------------------------------

:touchable is an option added to the belongs_to, has_one, and has_many methods
when acts_as_touchable is loaded by init. It defines the touchable relationship
and when to update the related Records. It also provides instance methods
touch_{association_id} and touch_{association_id}! for the defined association.

Default :touchable value is false, and the belongs_to/has_one/has_many relation
behaves as it would without acts_as_touchable. This is provided as a quick and
easy way to disable acts_as_touchable without having to toggle comments on
multiple lines.

Accepted options:  false, true, :none, :after_create, :after_destroy,
:after_save, :after_update, :after_validation, :after_validation_on_create,
:after_validation_on_update, :before_create, :before_destroy, :before_save,
:before_update, :before_validation, :before_validation_on_create, 
:before_validation_on_update, or any array of valid callback symbols

:touchable => true is an alias for touchable => [:after_save, :after_destroy]

All non-false values received by :touchable add a touch_#{association_id}
method.

Any options named after call backs will set up the appropriate call back(s)
to update the related model.

touchable => :none disables updating the related model as part of the
call back chain. But still provides the methods to touch the associated object,
giving you greater control over when these methods are called.



Example
=======


class Parent < ActiveRecord::Base
has_many :children
acts_as_touchable :column => :timestamp
        # adds touch and touch! methods updating timestamp whenever
        # Parent is touched.
end



class ToucherExample < ActiveRecord::Base
belongs_to :parent, :touchable => :after_save
        # adds after_save call back to touch related touchable_example model.
end
@parent = Parent.new
@parent.touch #updates timestamp to current time on @parent without saving.


@child = @parent.children.create
.... #code that modifies @child
@child.save   # updates @parent.timestamp with current time and saves @parent.



Caveats:
========

Saving an unmodified object that has a :touchable association will not update
that relation. This is done to halt infinte loops when used there is a circular
:touchable or :autosave relation.

Things To Do:
=============
Create test suite


Copyright (c) 2009 Emery Finkelstein, released under the MIT license
